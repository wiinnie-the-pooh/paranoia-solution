// VulaSHAKA (Simultaneous Neutronic, Fuel Performance, Heat And Kinetics Analysis)
// Copyright (C) 2009-2010 Pebble Bed Modular Reactor (Pty) Limited (PBMR)
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// 
// See https://vulashaka.svn.sourceforge.net/svnroot/vulashaka
//
// Author : Alexey PETROV
//


//---------------------------------------------------------------------------
#ifndef __PARALELL_FOAM_TIMESOURCE_TASKFACTORY_IDL__
#define __PARALELL_FOAM_TIMESOURCE_TASKFACTORY_IDL__


//---------------------------------------------------------------------------
#include "parallel/corba/idl/TaskFactoryBase.idl"
#include "parallel/corba/idl/TaskBase.idl"

#include "parallel/foam/corba/idl/Foam_typedefs.idl"

//---------------------------------------------------------------------------
module parallel
{
  //---------------------------------------------------------------------------
  module foam
  {
    //---------------------------------------------------------------------------
    interface TimeSourceTask : TaskBase
    {
      void setTime( in dimensionedScalar newTime, in label newIndex );
      dimensionedScalar value();
      label timeIndex();
      
      void setDeltaT( in dimensionedScalar deltaT );
      dimensionedScalar deltaT();
      
      void setEndTime( in dimensionedScalar endTime );
      dimensionedScalar endTime();
      
      void setWriteInterval( in label writeInterval );
      label getWriteInterval();
    };


    //---------------------------------------------------------------------------
    interface TimeSourceTaskFactory : TaskFactoryBase
    {
      TimeSourceTask create( in string theInvocationShellScript );
      
      void publish( in TimeSourceTask theTask );
    };


    //---------------------------------------------------------------------------
  };


  //---------------------------------------------------------------------------
};


//---------------------------------------------------------------------------
#endif  // __PARALELL_FOAM_TIMESOURCE_TASKFACTORY_IDL__
